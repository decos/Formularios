FORMULARIOS EN ANGULAR

	INICIO DEL PROYECTO
		
		1. Añadir la referencia de bootstrap al proyecto
			src/index.html

	
	CREACION DE COMPONENTES - APROXIMACION POR TEMPLATE Y DATA
		
		Recursos: https://getbootstrap.com/docs/4.0/components/forms/
		
		TEMPLATE: Se trabaja mas x el lado del html
		DATA: Orientado a crearse del lado del codigo

		1. Crear un directorio llamado *components y dentro crear dos componentes:
			ng g c components/template -is
			ng g c components/data -is

		2. Importar el modulo *FormsModule al fichero *app.module
			src/app/app.module.ts

		3. Añadir la clase *main-container al fichero de estilos principal

		4. Crear un div con la clase *main-container en la vista principal de la app
		
		5. Añadir el recurso adjunto (formulario) en la vista del componente template


	TEMPLATE ngMODEL - ngSUBMIT - REFERENCIAS LOCALES A LOS ELEMENTO HTML
		
		- Si utilizas el NgMODEL tmb necesitas poner la propiedad NAME

		1. Importar el paquete *FormModule al modulo de la aplicacion y añadirlo 
			a *imports
			src/app/app.module.ts

		- Solo por poner el ngModel, sucede lo siguiente:
	 	
			ng-untouched	: El usuario no ha tocado esa caja
			ng-pristine	: Esta con su valor por defecto (Puede ser vacio)
			ng-valid	: Esta pasando todas las reglas de validacion impuestas
						a ese componente.

		- Si se coloca un valor en la etiqueta de texto, sucede lo siguiente:
			
			ng-dirty	: Ya no esta pristine, ya cambio su valor
		
		- Despues de colocar el valor, le das clic en otro lado, sucede lo siguiente:
			
			ng-touched	: Se cambia cuando movamos el cursor a otro lado

		2. Añadir el atributo required al elemento *nombre

			ng-invalid 	: Ahora va requerir por lo menos un caracter

		3. Quitar mensajes de HTML5, añadir a la etiqueta form lo siguiente:
			<form novalidate="">

		4. Añadir el atributo *minlength al elemento *nombre
			minlength="5"
			
		- El atributo *ng-invalid se convierte a *ng-valid al cumplir todas las 			reglas de validacion.

		5. Agregar el atributo *ngSubmit al formulario que apunte a la funcion *guardar
			(ngSubmit)="guardar"

		6. Crear la función guardar
			src/app/components/template/template.component.ts

		7. Agregar el atributo *ngModel a los elementos: *apellido e *email

		
	TEMPLATE: OBTENIENDO LA INFORMACIÓN DEL FORMULARIO
		
		1. Añadir el atributo *ngForm al formulario
			<form (ngSubmit)="guardar(forma)" #forma="ngForm" novalidate="">

		2. En el componente *template añadir un parametro (forma) a la funcion *guardar
			guardar( forma:any ){
		
		- Imprimirla en consola el parametro *forma

		- Si el valor del campo *valid es igual a *true,  es porque ha pasado
			la validación, sino algo falto en el formulario

		3. Importar el paquete *ngForm al componente *template
			import { NgForm } from '@angular/forms';
			guardar( forma:NgForm ){

		- Imprimir en consola
			console.log("ngForm: ", forma);
			console.log("Valor: ", forma.value);
			 
		4. Crear un objeto de prueba llamado *usuario

		5. Agregar los corchetes o llaves cuadradas a los elementos de la vista
			con el fin de precargar el usuario de prueba en el formulario

		- Escuchar los cambios -> []
		
		- Emitir los cambios -> ()

		- Imprimir en consola	


	TEMPLATE: VALIDACIONES INDEPENDIENTES  Y CAMBIO DE ESTILO

		1. Añadir la validación de *required al campo *apellido

		2. Añadir un patron al campo *correo
			pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,3}$"

		3. Colocar todos los atributos del objeto *usuario en nulo

		4. Agregar un nuevo estilo al componente *template
			src/app/components/template/template.component.ts
			
			styles: [`
			      .ng-invalid.ng-touched:not(form) {
				border: 1px solid red;
			      }
			    `]

		5. Añadir dos *divs debajo del elemento *nombre
			- Este campo es requerido
			- Por lo menos 5 caracteres

		6. Añadir la variable local al elemento *nombre en la vista
			#nombre="ngModel"
		
		7. Añadir los condicionales a los *divs usando *ngIf
			- *ngIf="nombre.errors?.required"
			- *ngIf="nombre.errors?.minlength"

		
	RESOLUCIÓN DE LA TAREA - VALIDACIONES

		1. Añadir las siguientes condiciones

			- *ngIf="apellido.errors?.required"
			- *ngIf="correo.errors?.required"
			- *ngIf="correo.errors?.pattern"

	
	TEMPLATE: APLICANDO CLASES DEL BOOTSTRAP  PARA MOSTRAR ERRORES Y MENSAJES
		
		Recursos:
			- https://getbootstrap.com/docs/4.0/components/forms/#validation

		1. Agregar la clase *was-validated al iniciar el sa los datos al formulario
			[ngClass]="{'was-validated': forma.dirty }"

		2. Agregar la validacion en cada div, para que el mensaje aparesca al
			ser modificado el elemento.
			Ex:
				*ngIf="nombre.errors?.required && nombre.dirty"
           			 class="text-danger"
	
		3. Añadir una clase a los elementos para que se marque de verde o rojo
			la caja de texto segun pase o no la validación
			Ex:
				ngClass]="{ 'text-danger': !nombre.valid && nombre.dirty , 						'text-success': nombre.valid && nombre.dirty }"

		4. Comentar en el componente *template la linea *styles

	
	TEMPLATE: USO DE SELECTS, RADIO Y CHECKBOX

		USO DE SELECTS

		1. Crear un arreglo de objetos en el componente *template llamado *paises

		2. Agregar al usuario en el componente *template un atributo llamado *pais

		3. Añadir un elemento llamdo *pais debajo del elemento *correo en la vista

		USO DE RADIOS
	
		- Recurso: 
		https://getbootstrap.com/docs/4.0/components/forms/#checkboxes-and-radios
			
		{{  }} = Interpolacion
		[ ] = Enlace a las propiedades		

		1. Crear un arreglo de caracteres en el componente *template llamado *sexos

		2. Agregar al usuario en el componente *template un atributo llamado *sexo

		3. Añadir un elemento llamdo *sexo debajo del elemento *pais en la vista
	
		USO DE CHECKBOX
	
		- Recurso: 
		https://getbootstrap.com/docs/4.0/components/forms/#checkboxes-and-radios

		1. Agregar al usuario en el componente *template un atributo llamado *acepta

		2. Añadir un elemento llamdo *acepta debajo del elemento *sexo en la vista


	DATA: APROXIMACIÓN DE FORMULARIOS USANDO CÓDIGO

		1. Copiar el código del formulario adjunto en la sección
			src/app/components/data/data.component.html
			
			
	DATA: CREACIÓN DEL FORMULARIO - FormGroup

		1. Modificar la vista principal de la aplicación para que llame al 
			selector *app-data
			src/app/app.component.html

		2. Importar en el componente *data los siguientes paquetes
			import { FormGroup, FormControl, Validator } from '@angular/forms';

		3. Importar en el modulo principal de la aplicacion el parquete
			*ReactiveFormsModule y colocarlo en *imports
			src/app/app.module.ts

		4. Codear en el constructor un *formGroup y la funcion *guardarCambios
			src/app/components/data/data.component.ts				

		5. Codear en la etiqueta *form los atributos *formGroup, *ngSubmit y 
			*novalidate 
			src/app/components/data/data.component.html

		- novalidate : No realice ninguna validacion de HTML5
		
		- pending : Validacion asincrona que este pendiente de ejecutarse,
				si no hay su valor es false.
		
		
	DATA: ENLAZANDO INPUTS A PROPIEDADES DEL FormGroup y VALIDACIONES
		
		1. Agregar las relaciones para *nombre, *apellido, *correo
			- formControlName=""
			src/app/components/data/data.component.html

		2. Quitar *novalidate de la etiqueta *form porque no se va poner
			ningun required por defecto
			src/app/components/data/data.component.html
	
		- Corregir, es *Validators, el paquete importado
			src/app/components/data/data.component.ts
		
		3. Añadir el *Validators.required a todas las propiedades del objeto *forma

		4. Imprimir en la vista *forma.valid para observar el cambio


	DATA: CONTINUANDO CON LAS VALIDACIONES Y HTML
		
		1. Añadir dos divs despues del campo de texto *nombre que imprima los sgts
			mensajes:

			- El nombre es necesario.
			- Por lo menos 3 caracteres.
		
		2. Añadir las siguientes validaciones en los divs:

			- *ngIf="forma.controls['nombre'].errors?.required"
			- *ngIf="forma.controls['nombre'].errors?.minlength"

		3. Añadir en el componente el validador *Validators.minLength(3) al 
			atributo *nombre

		4. Añadir la directiva 	*ngClass al div *nombre
			
			- [ngClass]="{ 'text-danger': !forma.get('nombre').valid }"


	DATA: AGRUPACIONES DE LOS OBJETOS- formGroupName

		1. Definir en el componente un componente llamado *nombrecompleto

		2. Modificar el *FormGroup del componente

		3. Modificar la vista y adaptarlo al nuevo objeto

	
	

		









